import{_ as a,c as e,o as t,ag as i}from"./chunks/framework.C5fKOAaa.js";const k=JSON.parse('{"title":"支持平台","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/platform.md","filePath":"zh/guide/platform.md","lastUpdated":1755957925000}'),n={name:"guide/platform.md"};function r(p,s,l,o,d,h){return t(),e("div",null,[...s[0]||(s[0]=[i(`<h1 id="support-platform" tabindex="-1">支持平台 <a class="header-anchor" href="#support-platform" aria-label="Permalink to &quot;支持平台 {#support-platform}&quot;">​</a></h1><p>ease-reactify目前基于<code>React19</code>框架开发，其引入了几个新特性和改进，其中包括对<code>React 18</code>特性的扩展和优化，同时也考虑到了向后兼容性。</p><p>值得注意的是，并非所有浏览器都能立即支持所有最新的JavaScript特性，特别是那些使用了诸如React 18引入的并发特性（如<code>startTransition</code>和<code>useId</code>）的React 19应用。</p><h2 id="compatibility" tabindex="-1">兼容性 <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;兼容性 {#compatibility}&quot;">​</a></h2><p>为了确保旧版浏览器也能运行你的React应用，你可以使用<code>Babel</code>来转译代码。Babel可以将现代JavaScript代码转换为更兼容的旧版代码。例如你可以使用 <code>@babel/preset-env</code> 预设来自动处理这一转换过程，确保你的代码可以在旧版浏览器上运行，以下是浏览器支持情况的简单参考：</p><table tabindex="0"><thead><tr><th>version</th><th><img src="https://cdn.jsdelivr.net/npm/@browser-logos/chrome/chrome_32x32.png" alt="Chrome"> <br> Chrome</th><th><img src="https://cdn.jsdelivr.net/npm/@browser-logos/edge/edge_32x32.png" alt="IE"> <br> Edge</th><th><img src="https://cdn.jsdelivr.net/npm/@browser-logos/firefox/firefox_32x32.png" alt="Firefox"> <br> Firefox</th><th><img src="https://cdn.jsdelivr.net/npm/@browser-logos/safari/safari_32x32.png" alt="Safari"> <br> Safari</th></tr></thead><tbody><tr><td>&lt; 2.5.0</td><td>Chrome ≥ 64</td><td>Edge ≥ 79</td><td>Firefox ≥ 78</td><td>Safari ≥ 12</td></tr><tr><td>2.5.0 +</td><td>Chrome ≥ 85</td><td>Edge ≥ 85</td><td>Firefox ≥ 79</td><td>Safari ≥ 14.1</td></tr></tbody></table><p>如果你使用Create React App（CRA），它已经内置了对Babel的支持，你可以通过修改或添加<code>.babelrc</code>文件或通过babel.config.js文件来配置Babel，例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@babel/preset-env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@babel/preset-react&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当然你也可以通过查询 <a href="https://caniuse.com/" target="_blank" rel="noreferrer">caniuse</a> 平台来查询具体一些特性在不同浏览器上的支持情况。</p><h2 id="sass" tabindex="-1">Sass <a class="header-anchor" href="#sass" aria-label="Permalink to &quot;Sass {#sass}&quot;">​</a></h2><p>ease-reactify目前版本对样式的解决方案是使用 <a href="https://github.com/sass" target="_blank" rel="noreferrer">Sass</a>，这对于大多数现代浏览器来说是支持的。然而，如果你的目标用户群体中包括了旧版浏览器（例如IE），你可能需要额外的polyfills或工具来确保样式也能在这些老旧的浏览器上正常工作。</p><p>在 <code>2.8.5</code> 及以后的版本, Sass的最低支持版本为 <code>1.79.0</code>，如果您的终端提示 <code>legacy JS API Deprecation Warning</code>，如在vite框架中，您可以配置以下代码在 <a href="https://vite.dev/config/shared-options.html#css-preprocessoroptions" target="_blank" rel="noreferrer">vite.config.ts</a> 来解决这个问题：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  preprocessorOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    scss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;modern-compiler&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13)])])}const g=a(n,[["render",r]]);export{k as __pageData,g as default};
