import{_ as s,c as e,o as i,ag as t}from"./chunks/framework.C5fKOAaa.js";const k=JSON.parse('{"title":"Ease-Reactify 是什么","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/introduce.md","filePath":"zh/guide/introduce.md","lastUpdated":1755961136000}'),n={name:"guide/introduce.md"};function r(l,a,p,h,o,c){return i(),e("div",null,[...a[0]||(a[0]=[t(`<h1 id="what-is-ease-react" tabindex="-1">Ease-Reactify 是什么 <a class="header-anchor" href="#what-is-ease-react" aria-label="Permalink to &quot;Ease-Reactify 是什么 {#what-is-ease-react}&quot;">​</a></h1><p>ease-reactify是目前基于 <a href="https://react.dev/learn" target="_blank" rel="noreferrer">React 19</a> 开发的高效UI组件库，旨在、为开发者提供了一套易用、可扩展的 UI 解决方案，帮助快速构建美观且功能丰富的应用界面。其未来主要具备以下特性：</p><ul><li>✨ 融合现代设计美学与流畅交互体验</li><li>🚀 即装即用的高性能 React 组件集</li><li>🔒 基于 TypeScript 构建，类型安全无虞</li><li>🛠️ 完善的开发工具链与设计资源</li><li>🌐 支持多语言无缝切换 <code>(正在开发中...)</code></li><li>🖌️ 精细化主题配置，轻松适配品牌风格</li></ul><div class="tip custom-block" style="padding-top:8px;"><p>想立即尝试一下？跳到<a href="./quick-started.html">快速上手</a>。</p></div><h2 id="design-principles" tabindex="-1">设计原则 <a class="header-anchor" href="#design-principles" aria-label="Permalink to &quot;设计原则 {#design-principles}&quot;">​</a></h2><ul><li><p><strong>简洁与高效</strong></p><p>组件库采用了简洁易懂的 API 和配置，使得开发者能迅速上手并应用到项目中。基于 React 19 和 Vite 开发，确保了性能的优化和开发流程的高效性，支持热更新和快速构建。</p></li><li><p><strong>可扩展性</strong></p><p>组件库遵循模块化设计，所有组件都可以独立使用并且易于扩展。开发者可以根据需求轻松定制和调整样式，满足各种项目需求。提供可插拔的功能，支持开发者通过插件和自定义配置来增强或修改组件行为。</p></li><li><p><strong>一致性</strong> 提供统一的设计语言和一致的组件风格，确保项目中的 UI 元素在外观和交互上的统一性，提升用户体验。支持设计系统和主题功能，使得整个应用的界面风格可以根据需要灵活切换。</p></li><li><p><strong>易于测试</strong> 组件库集成了 Vitest 进行单元测试，保证组件的稳定性和可靠性。所有主要组件都经过严格的单元测试，确保在不同场景下的高效运作。</p></li></ul><h2 id="sample-code" tabindex="-1">示例代码 <a class="header-anchor" href="#sample-code" aria-label="Permalink to &quot;示例代码 {#sample-code}&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { EButton } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ease-reactify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App;</span></span></code></pre></div><h3 id="component-advantages" tabindex="-1">组件优势 <a class="header-anchor" href="#component-advantages" aria-label="Permalink to &quot;组件优势 {#component-advantages}&quot;">​</a></h3><p><code>ease-reactify</code> 默认支持基于ES Modules的tree-shaking。</p><p><code>ease-reactify</code> 使用TypeScript编写，提供完整的类型定义，无需再引入额外的类型定义文件。</p><h3 id="component-status" tabindex="-1">组件状态 <a class="header-anchor" href="#component-status" aria-label="Permalink to &quot;组件状态 {#component-status}&quot;">​</a></h3><p>目前的UI组件库在样式解决方案上采用了 <code>Sass</code> 预处理方案，借助Sass强大的嵌套、变量、混合等特性，作者能够更高效、规范地编写组件样式，大幅提升了样式开发的便捷性与可维护性。</p><div class="warning custom-block"><p class="custom-block-title">样式解决方案</p><p>由于样式与组件逻辑分离，在打包后需要用户在入口文件中单独引入样式文件，组件样式才能正常生效，这在一定程度上增加了最终的打包体积。</p><p>组件库的样式解决方案将向 <code>css-in-js</code> 方向演进，并结合 TypeScript 进行开发。这一转变将带来显著优势：组件样式与逻辑紧密结合，用户无需额外引入样式文件，能极大简化使用流程。但同时也需注意，这种方式会使组件在渲染时产生额外的计算开销，可能在一定程度上影响渲染效率。</p></div><p>总体而言，两种方案各有侧重，当前的 Sass 方案聚焦于开发便捷性，而未来的 css-in-js 方案则更注重使用体验的优化，作者将根据实际场景需求平滑过渡，平衡开发效率与运行性能。</p><h2 id="how-to-contribute" tabindex="-1">如何贡献 <a class="header-anchor" href="#how-to-contribute" aria-label="Permalink to &quot;如何贡献 {#how-to-contribute}&quot;">​</a></h2><p>如果你希望参与贡献，欢迎提交 <a href="https://github.com/ztK63LrD/ease-reactify/pulls" target="_blank" rel="noreferrer">Pull Request</a>，或者 <a href="https://blog.csdn.net/qq_53123067" target="_blank" rel="noreferrer">联系作者</a></p><blockquote><p>强烈推荐阅读 <a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way" target="_blank" rel="noreferrer">《提问的智慧》</a>、<a href="https://github.com/seajs/seajs/issues/545" target="_blank" rel="noreferrer">《如何向开源社区提问题》</a> 和 <a href="https://www.chiark.greenend.org.uk/%7Esgtatham/bugs-cn.html" target="_blank" rel="noreferrer">《如何有效地报告 Bug》</a>、<a href="https://zhuanlan.zhihu.com/p/25795393" target="_blank" rel="noreferrer">《如何向开源项目提交无法解答的问题》</a>，更好的问题更容易获得帮助。</p></blockquote><h2 id="license" tabindex="-1">使用许可 <a class="header-anchor" href="#license" aria-label="Permalink to &quot;使用许可 {#license}&quot;">​</a></h2><p>ease-reactify使用<a href="https://opensource.org/license/MIT" target="_blank" rel="noreferrer">MIT License</a>许可证书。</p><p>如果你觉得 <code>ease-reactify</code> 对你有帮助，可以考虑对其进行赞助。这将极大地鼓励作者继续开发和维护该项目。点击 <a href="https://blog.csdn.net/qq_53123067" target="_blank" rel="noreferrer">访问网址</a> 添加微信。</p>`,21)])])}const g=s(n,[["render",r]]);export{k as __pageData,g as default};
