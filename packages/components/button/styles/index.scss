@use '../../style/utils/index' as *;
@use '../../style/common/var' as *;
@use './variable.scss' as *;

@include b(button) {
    @include inline-flex;
    @include color-bg-border-variant($white, $default, transparent);
    height: 2rem;
    padding: 0px 15px;
    outline: none;
    border: 1px solid;
    border-radius: $border-radius;
    cursor: pointer;
    // #region 处理不同type类型(使用映射简化样式应用)
    @include m(default) {
        @include color-bg-border-variant($black, $white, $border-color);
        &:hover {
            color: $primary;
            border-color: $primary;
        }
        &:active {
            background-color: transparent;
        }
    }
    @each $type, $color in $button-colors {
        @include m(#{$type}) {
            background-color: $color;
            // 获取当前类型对应的悬停颜色
            $hover-color: map-get($button-hover, $type);
            // 设置该类型按钮的悬停样式
            &:hover {
                background-color: $hover-color;
            }
            &:active {
                background-color: $color;
            }
        }
    }
    // #endregion

    // #region 处理不同size类型
    @each $type, $size in $button-size {
        @include m(#{$type}) {
            padding: $size;
            // 获取当前类型对应的高度
            $size-height: map-get($button-height, $type);
            height: $size-height;
        }
    }
    // #endregion

    // #region 处理不同形状
    @each $type, $shape in $button-shape {
        @include m(#{$type}) {
            border-radius: $shape;
        }
    }
    // #endregion

    // #region 处理不同状态(朴素、禁用、加载中)
    @each $type, $color in $button-plain {
        @include m(#{$type}) {
            @include when(plain) {
                background-color: $color;
                // 获取当前类型对应的悬停颜色
                $hover-color: map-get($button-hover, $type);
                // 设置该类型按钮的悬停样式
                &:hover {
                    background-color: $hover-color;
                }
                &:active {
                    background-color: $color;
                }
            }
        }
    }
    @include when(disabled) {
        cursor: not-allowed;
        opacity: 0.5;
    }
    @include when(loading) {
        position: relative;
        pointer-events: none;
        &::after {
            content: '';
            display: inline-block;
            width: 1rem;
            height: 1rem;
            border: 2px solid $white;
            border-left-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 0.5rem;
        }
    }
    // #endregion

    // @include when(loading) {
    //     @include button-variant($color-black, $color-grey, $color-grey);
    // }

    // @include when(disabled) {
    //     @include button-variant($color-black, $color-grey, $color-black);

    //     &,
    //     &:hover,
    //     &:focus {
    //         cursor: not-allowed;
    //     }
    // }

    // @include when(toTop) {
    //     position: fixed;
    //     top: 80%;
    //     right: 10%;
    //     user-select: none;
    //     pointer-events: none;
    //     opacity: 0;
    //     z-index: 100;
    // }

    // @include when(visible) {
    //     box-shadow: 1px 2px 2px rgba($color: #909090, $alpha: 0.1),
    //         2px 2px 2px rgba($color: #909090, $alpha: 0.2);
    //     pointer-events: initial;
    //     opacity: 1;
    // }
}
